给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？找出所有满足条件且不重复的四元组。

注意：

答案中不可以包含重复的四元组。

示例：

给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。

满足要求的四元组集合为：
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]


solution:注意点：target不是0不一定比target大就不存在！


class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
         List<List<Integer>> res=new ArrayList<List<Integer>>();
        Arrays.sort(nums);
        int size=nums.length;
        for(int i=0;i<size-3;i++){
            //if(nums[i]>target) break;
            if(i>=1&&nums[i]==nums[i-1]){
                continue;
            }
            int tar=target-nums[i];
            for(int j=i+1;j<size-2;j++){
           // if(nums[j]>tar) break;
            if(j>=i+2&&nums[j]==nums[j-1]) continue;
            int target2=tar-nums[j];
            int first=j+1;
            int last=size-1;
            while(first<last){
                if(nums[first]+nums[last]>target2){
                    last--;
                }else if(nums[first]+nums[last]<target2){
                    first++;
                }else{
                    List<Integer> temp=new ArrayList<Integer>();
                    temp.add(nums[i]);
                    temp.add(nums[j]);
                    temp.add(nums[first]);
                    temp.add(nums[last]);
                    res.add(temp);
                    while((first+1)<last&&nums[first+1]==nums[first]){//舍掉重复的、
                        first++;
                    }
                    while((last-1)>first&&nums[last-1]==nums[last]){
                        last--;
                    }
                    ++first;
                    last--;
                }
            }
            
            
        }
            
        }
        return res;
    }
}
