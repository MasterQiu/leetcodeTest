给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807





方法一：
三种情况需要循环，也就是只要有一个数字还有更高位或者有进位的时候，在这里面需要一个变量来保存进位，没有进位的时候，该变量置为0；

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode result=new ListNode(0);
        ListNode head=result;
        int temp=0;
        
        while(l1!=null||l2!=null||temp!=0){
            int sum=(l1!=null?l1.val:0)+(l2!=null?l2.val:0)+temp;
            temp=sum/10;
            head.next=new ListNode(sum%10);
            head=head.next;
            l1=(l1!=null)?l1.next:l1;
            l2=(l2!=null)?l2.next:l2;
            
        }
        
        return result.next;
    
        
    }
}
