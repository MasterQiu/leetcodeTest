给定一个数组 nums, 编写一个函数将所有 0 移动到它的末尾，同时保持非零元素的相对顺序。

例如， 定义 nums = [0, 1, 0, 3, 12]，调用函数之后， nums 应为 [1, 3, 12, 0, 0]。

注意事项:

必须在原数组上操作，不要为一个新数组分配额外空间。
尽量减少操作总数。


我自己超菜的两次循环算法：
class Solution {
    public void moveZeroes(int[] nums) {
        int temp=0;
        for(int i=0;i<nums.length;i++){
            if(nums[temp]==0){
                for(int j=temp;j<nums.length-1;j++){
                    nums[j]=nums[j+1];
                }
                nums[nums.length-1]=0;
                temp--;
            }
            temp++;
        }
        
        
    }
}


改进后，一次循环算法，通过两个指针，再循环过程中每次遇到一个非0的数便加到指针处，指针++

class Solution {
    public void moveZeroes(int[] nums) {
        int pos = 0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                nums[pos]=nums[i];
                pos++;
                
            }
        }
        
        for(int j=pos;j<nums.length;j++){
            nums[j]=0;
        }
        
        
    }
}
