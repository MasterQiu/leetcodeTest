给定一个非空数组，返回此数组中第三大的数。如果不存在，则返回数组中最大的数。要求算法时间复杂度必须是O(n)。

示例 1:

输入: [3, 2, 1]

输出: 1

解释: 第三大的数是 1.
示例 2:

输入: [1, 2]

输出: 2

解释: 第三大的数不存在, 所以返回最大的数 2 .
示例 3:

输入: [2, 2, 3, 1]

输出: 1

解释: 注意，要求返回第三大的数，是指第三大且唯一出现的数。
存在两个值为2的数，它们都排第二。


解法：

class Solution {
    public int thirdMax(int[] nums) {
        long[] result={Long.MIN_VALUE,Long.MIN_VALUE,Long.MIN_VALUE};
        for(int i=0;i<nums.length;i++){
            if(nums[i]>result[0]&&nums[i]<result[1]){
                result[0]=nums[i];
            }else if(nums[i]>result[1]&&nums[i]<result[2]){
                result[0]=result[1];
                result[1]=nums[i];
            }else if(nums[i]>result[2]){
                result[0]=result[1];
                result[1]=result[2];
                result[2]=nums[i];
            }
        }
        if(result[0]==Long.MIN_VALUE){
            return (int)result[2];
        }
        return (int)result[0];
        
        
        
    }
}
