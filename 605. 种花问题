假设你有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花卉不能种植在相邻的地块上，它们会争夺水源，两者都会死去。

给定一个花坛（表示为一个数组包含0和1，其中0表示没种植花，1表示种植了花），和一个数 n 。能否在不打破种植规则的情况下种入 n 朵花？能则返回True，不能则返回False。

示例 1:

输入: flowerbed = [1,0,0,0,1], n = 1
输出: True
示例 2:

输入: flowerbed = [1,0,0,0,1], n = 2
输出: False


我的方法:分类首先考虑起始位置和最后的位置，然后考虑连续三个地块，若前一个为0后一个为0自身也为0则可以中一朵花。

class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        if(flowerbed.length==1){
            if(flowerbed[0]==1&&n==1){
                return false;
            }else{
                return true;
            }
        }
        
        
        for(int i=0;i<flowerbed.length;i++){
            
            if(i==0){
            if(flowerbed[1]==0&&flowerbed[0]==0){
                n--;
                flowerbed[0]=1;
            }
            }else if((i==flowerbed.length-1)){
                if(flowerbed[i-1]==0&&flowerbed[flowerbed.length-1]==0){
                    n--;
                    flowerbed[i]=1;
                }
            }else{
                if(flowerbed[i-1]==0&&flowerbed[i+1]==0&&flowerbed[i]==0){
                    n--;
                    flowerbed[i]=1;
                }
            }
        
        }
        if(n<=0){
                return true;
            }else{
            return false;
        }
        
        
        
    }
}


优化我自己的算法写法：

 class Solution {  
public:  
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {  
        for(int i = 0; i < flowerbed.size(); i++){  
            if(flowerbed[i] == 0 &&(i==0||flowerbed[i-1]==0)&&(i==flowerbed.size()-1||flowerbed[i+1]==0)){  
                flowerbed[i] = 1;  
                n--;  
            }      
        }  
        return n <= 0;  
    }  
};  


高效方法，思路：
这道题给了我们一个01数组，其中1表示已经放了花，0表示可以放花的位置，但是有个限制条件是不能有相邻的花。
那么我们来看如果是一些简单的例子，如果有3个连续的零，000，能放几盆花呢，其实是要取决约左右的位置的，如果是10001，
那么只能放1盆，如果左右是边界的花，那么就能放两盆，101，所以如果我们想通过计算连续0的个数，然后直接算出能放花的个数，
就必须要对边界进行处理，处理方法是如果首位置是0，那么前面再加上个0，如果末位置是0，就在最后面再加上个0。
这样处理之后我们就默认连续0的左右两边都是1了，这样如果有k个连续0，那么就可以通过(k-1)/2来快速计算出能放的花的数量

C语言

class Solution 
{
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) 
    {
        if (flowerbed.size() <= 0)
            return false;
        if (flowerbed[0] == 0)
            flowerbed.insert(flowerbed.begin(),0);
        if (flowerbed[flowerbed.size() - 1] == 0)
            flowerbed.push_back(0);

        int sum = 0, count = 0;
        for (int i = 0; i < flowerbed.size(); i++)
        {
            if (flowerbed[i] == 1)
            {
                sum += (count - 1) / 2;
                count = 0;
            }
            else
                count++;
        }
        if(count>0)
            sum += (count - 1) / 2;
        return sum >= n;
    }
};
