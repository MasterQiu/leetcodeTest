给定一个非空且只包含非负数的整数数组 nums, 数组的度的定义是指数组里任一元素出现频数的最大值。

你的任务是找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。

示例 1:

输入: [1, 2, 2, 3, 1]
输出: 2
解释: 
输入数组的度是2，因为元素1和2的出现频数最大，均为2.
连续子数组里面拥有相同度的有如下所示:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
最短连续子数组[2, 2]的长度为2，所以返回2.
示例 2:

输入: [1,2,2,3,1,4,2]
输出: 6
注意:

nums.length 在1到50,000区间范围内。
nums[i] 是一个在0到49,999范围内的整数。

想法：
maxs记录元素的最大下标，mins记录元素的最小下标，cnts记录元素的出现个数，三者均是HashMap结构；
通过遍历记录元素与上三个对应的记录，只要找到最大次数对应的元素，则就找到了该元素的最大和最小下标，即找到了度相同的最小子数组。



算法如下：

class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer,Integer> start = new HashMap<Integer,Integer>();
        Map<Integer,Integer> end = new HashMap<Integer,Integer>();
        Map<Integer,Integer> count = new HashMap<Integer,Integer>();
        int max=0;
        for(int i=0;i<nums.length;i++){
            if(!count.containsKey(nums[i])){
                count.put(nums[i],0);
                start.put(nums[i],i);
            }
            
            count.put(nums[i],count.get(nums[i])+1);
            end.put(nums[i],i);
            max=Math.max(max,count.get(nums[i]));
        }
        int min=Integer.MAX_VALUE;
        for(Integer temp:count.keySet()){
            if(count.get(temp)==max){
                min=Math.min(min,(end.get(temp)-start.get(temp)+1));
            }
        }
        
        return min;
        
        
        
    }
}


用数组的方法：

class Solution {
    public int findShortestSubArray(int[] nums) {
        int max = nums[0];
        int min = nums[0];
        for(int i=1;i<nums.length;i++)
        {
            if(nums[i]>max)
                max = nums[i];
            if(nums[i]<min)
                min = nums[i];
        }
        //起点数组
        int[] start = new int[max-min+1];
        for(int i=0;i<start.length;i++)
        {
            start[i] = -1;
        }
        //跨度数组
        int[] length = new int[max-min+1];
        //该数出现的次数
        int[] times = new int[max-min+1];
        int maxNum = 0;
        for(int i=0;i<nums.length;i++)
        {
            int index = nums[i]-min;
            //更新出现的次数并找到出现次数的最大值
            times[index]++;
            maxNum = Math.max(maxNum,times[index]);
            //更新起点位置
            if(start[index]==-1){
                 start[index]=i;
            } 
            //更新区间长度
            length[index] = i-start[index]+1;
        }
        int res = nums.length;
        for(int i = 0;i<times.length;i++)
        {
            if(times[i]==maxNum&&length[i]!=0&&length[i]<res)
                res = length[i];
        }
        return res;
    }
}

