在一个给定的数组nums中，总是存在一个最大元素 。

查找数组中的最大元素是否至少是数组中每个其他数字的两倍。

如果是，则返回最大元素的索引，否则返回-1。

示例 1:

输入: nums = [3, 6, 1, 0]
输出: 1
解释: 6是最大的整数, 对于数组中的其他整数,
6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.
 

示例 2:

输入: nums = [1, 2, 3, 4]
输出: -1
解释: 4没有超过3的两倍大, 所以我们返回 -1.
 

提示:

nums 的长度范围在[1, 50].
每个 nums[i] 的整数范围在 [0, 99].


solotion1:
想法：求出数组中第一第二大的数比较两倍
class Solution {
    public int dominantIndex(int[] nums) {
        int first=Integer.MIN_VALUE;
        int second=Integer.MIN_VALUE;
        int tag=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>=first){
                second=first;
                first=nums[i];
                tag=i;
            }else if(nums[i]>second){
                second=nums[i];
            }
        }
        if(first>=(second*2)){
            return tag;
            
        }
        return -1;
        
    }
}

solotion2

class Solution {
    public int dominantIndex(int[] nums) {
        int index=-1;
        int max=0;
        for(int i = 0; i<nums.length; i++){
            if (nums[i]>max){
                if(nums[i]>=2*max)
                    index = i;
                else index=-1;
                max=nums[i];
            }else if(2*nums[i]> max)
                index = -1;
        }
        return index;
      
    }
}
